{"version":3,"sources":["VideoFooter.js","VideoSidebar.js","Video.js","axios.js","App.js","serviceWorker.js","index.js"],"names":["VideoFooter","channel","description","song","className","mode","index","src","alt","VideoSidebar","likes","shares","messages","useState","liked","setLiked","fontSize","onClick","e","parseInt","Video","url","playing","setPlaying","videoRef","useRef","loop","current","pause","play","ref","instance","axios","create","baseURL","App","videos","setVideos","useEffect","a","get","response","data","fetchPosts","console","log","map","id","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qXA+BeA,MA1Bf,YAAsD,IAA/BC,EAA8B,EAA9BA,QAASC,EAAqB,EAArBA,YAAaC,EAAQ,EAARA,KAC3C,OACE,yBAAKC,UAAU,eACb,yBAAKA,UAAU,qBACb,gCAAMH,GACN,2BAAIC,GACJ,yBAAKE,UAAU,uBACb,kBAAC,IAAD,CAAeA,UAAU,sBACzB,kBAAC,IAAD,CAAQC,KAAK,WACV,cAAGC,MAAH,OACC,oCACE,2BAAIH,SAMd,yBACEC,UAAU,sBACVG,IAAI,uDACJC,IAAI,O,4ECUGC,MA5Bf,YAAoD,IAA5BC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,OAAQC,EAAY,EAAZA,SAAY,EACvBC,oBAAS,GADc,mBAC1CC,EAD0C,KACnCC,EADmC,KAGjD,OACE,yBAAKX,UAAU,gBACb,yBAAKA,UAAU,wBACZU,EACC,kBAAC,IAAD,CAAcE,SAAS,QAAQC,QAAS,SAACC,GAAD,OAAOH,GAAS,MAExD,kBAAC,IAAD,CACEC,SAAS,QACTC,QAAS,SAACC,GAAD,OAAOH,GAAS,MAG7B,2BAAID,EAAQK,SAAST,GAAS,EAAIA,IAEpC,yBAAKN,UAAU,wBACb,kBAAC,IAAD,CAAaY,SAAS,UACtB,2BAAIJ,IAEN,yBAAKR,UAAU,wBACb,kBAAC,IAAD,CAAWY,SAAS,UACpB,2BAAIL,M,0CCYGS,MAlCf,YAA8E,IAA7DC,EAA4D,EAA5DA,IAAKpB,EAAuD,EAAvDA,QAASC,EAA8C,EAA9CA,YAAaC,EAAiC,EAAjCA,KAAMO,EAA2B,EAA3BA,MAAOE,EAAoB,EAApBA,SAAUD,EAAU,EAAVA,OAAU,EAC7CE,oBAAS,GADoC,mBACpES,EADoE,KAC3DC,EAD2D,KAErEC,EAAWC,iBAAO,MAYxB,OACE,yBAAKrB,UAAU,SACZkB,EACC,kBAAC,IAAD,CAAWlB,UAAU,mBAAmBY,SAAS,UAEjD,kBAAC,IAAD,CAAeZ,UAAU,mBAAmBY,SAAS,UAEvD,2BACEZ,UAAU,gBACVsB,MAAI,EACJT,QApBe,WACfK,GACFE,EAASG,QAAQC,QACjBL,GAAW,KAEXC,EAASG,QAAQE,OACjBN,GAAW,KAeTO,IAAKN,EACLjB,IAAKc,IAEP,kBAAC,EAAD,CAAapB,QAASA,EAASC,YAAaA,EAAaC,KAAMA,IAC/D,kBAAC,EAAD,CAAcO,MAAOA,EAAOE,SAAUA,EAAUD,OAAQA,M,gBC/B/CoB,E,OAJEC,EAAMC,OAAO,CAC5BC,QAAS,uDCiDIC,MA7Cf,WAAgB,IAAD,EACetB,mBAAS,IADxB,mBACNuB,EADM,KACEC,EADF,KAab,OAVAC,qBAAU,WAAM,4CACd,4BAAAC,EAAA,sEACyBP,EAAMQ,IAAI,aADnC,cACQC,EADR,OAEEJ,EAAUI,EAASC,MAFrB,kBAGSD,GAHT,4CADc,uBAAC,WAAD,wBAMdE,GACAC,QAAQC,IAAIT,KACX,IAID,yBAAKhC,UAAU,OACb,yBAAKA,UAAU,eACZgC,EAAOU,KACN,gBACEC,EADF,EACEA,GAEA9C,GAHF,EAEEoB,IAFF,EAGEpB,SACAC,EAJF,EAIEA,YACAC,EALF,EAKEA,KACAO,EANF,EAMEA,MACAE,EAPF,EAOEA,SACAD,EARF,EAQEA,OARF,OAUE,kBAAC,EAAD,CACEqC,IAAKD,EACL1B,IAAK,oFACLpB,QAASA,EACTE,KAAMA,EACNO,MAAOA,EACPE,SAAUA,EACVV,YAAaA,EACbS,OAAQA,UC9BFsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAMC,c","file":"static/js/main.b33a29d3.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./VideoFooter.css\";\r\nimport MusicNoteIcon from \"@material-ui/icons/MusicNote\";\r\nimport Ticker from \"react-ticker\";\r\n\r\nfunction VideoFooter({ channel, description, song }) {\r\n  return (\r\n    <div className=\"videoFooter\">\r\n      <div className=\"videoFooter__text\">\r\n        <h3>@{channel}</h3>\r\n        <p>{description}</p>\r\n        <div className=\"videoFooter__ticker\">\r\n          <MusicNoteIcon className=\"videoFooter__icon\" />\r\n          <Ticker mode=\"smooth\">\r\n            {({ index }) => (\r\n              <>\r\n                <p>{song}</p>\r\n              </>\r\n            )}\r\n          </Ticker>\r\n        </div>\r\n      </div>\r\n      <img\r\n        className=\"videoFooter__record\"\r\n        src=\"https://static.thenounproject.com/png/934821-200.png\"\r\n        alt=\"\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default VideoFooter;\r\n","import React, { useState } from 'react'\r\nimport './VideoSidebar.css'\r\nimport FavoriteIcon from '@material-ui/icons/Favorite'\r\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder'\r\nimport MessageIcon from '@material-ui/icons/Message'\r\nimport ShareIcon from '@material-ui/icons/Share'\r\n\r\nfunction VideoSidebar({ likes, shares, messages }) {\r\n  const [liked, setLiked] = useState(false)\r\n\r\n  return (\r\n    <div className='videoSidebar'>\r\n      <div className='videoSidebar__button'>\r\n        {liked ? (\r\n          <FavoriteIcon fontSize='large' onClick={(e) => setLiked(false)} />\r\n        ) : (\r\n          <FavoriteBorderIcon\r\n            fontSize='large'\r\n            onClick={(e) => setLiked(true)}\r\n          />\r\n        )}\r\n        <p>{liked ? parseInt(likes) + 1 : likes}</p>\r\n      </div>\r\n      <div className='videoSidebar__button'>\r\n        <MessageIcon fontSize='large' />\r\n        <p>{messages}</p>\r\n      </div>\r\n      <div className='videoSidebar__button'>\r\n        <ShareIcon fontSize='large' />\r\n        <p>{shares}</p>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default VideoSidebar\r\n","import React, { useRef, useState } from 'react'\r\nimport VideoFooter from './VideoFooter'\r\nimport VideoSidebar from './VideoSidebar'\r\nimport './Video.css'\r\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow'\r\nimport PauseIcon from '@material-ui/icons/Pause'\r\n\r\nfunction Video({ url, channel, description, song, likes, messages, shares }) {\r\n  const [playing, setPlaying] = useState(false)\r\n  const videoRef = useRef(null)\r\n\r\n  const onVideoPress = () => {\r\n    if (playing) {\r\n      videoRef.current.pause()\r\n      setPlaying(false)\r\n    } else {\r\n      videoRef.current.play()\r\n      setPlaying(true)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className='video'>\r\n      {playing ? (\r\n        <PauseIcon className='video__playpause' fontSize='large' />\r\n      ) : (\r\n        <PlayArrowIcon className='video__playpause' fontSize='large' />\r\n      )}\r\n      <video\r\n        className='video__player'\r\n        loop\r\n        onClick={onVideoPress}\r\n        ref={videoRef}\r\n        src={url}\r\n      ></video>\r\n      <VideoFooter channel={channel} description={description} song={song} />\r\n      <VideoSidebar likes={likes} messages={messages} shares={shares} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Video\r\n","import axios from 'axios'\r\nconst instance = axios.create({\r\n  baseURL: 'https://mern-tiktok-backend-practice.herokuapp.com',\r\n})\r\n\r\nexport default instance\r\n","import React from 'react'\r\nimport { useState, useEffect } from 'react'\r\nimport Video from './Video'\r\nimport './App.css'\r\nimport axios from './axios'\r\n\r\nfunction App() {\r\n  const [videos, setVideos] = useState([])\r\n\r\n  useEffect(() => {\r\n    async function fetchPosts() {\r\n      const response = await axios.get('/v2/posts')\r\n      setVideos(response.data)\r\n      return response\r\n    }\r\n    fetchPosts()\r\n    console.log(videos)\r\n  }, [])\r\n\r\n  return (\r\n    // BEM\r\n    <div className='app'>\r\n      <div className='app__videos'>\r\n        {videos.map(\r\n          ({\r\n            id,\r\n            url,\r\n            channel,\r\n            description,\r\n            song,\r\n            likes,\r\n            messages,\r\n            shares,\r\n          }) => (\r\n            <Video\r\n              key={id}\r\n              url={'http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4'}\r\n              channel={channel}\r\n              song={song}\r\n              likes={likes}\r\n              messages={messages}\r\n              description={description}\r\n              shares={shares}\r\n            />\r\n          )\r\n        )}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}